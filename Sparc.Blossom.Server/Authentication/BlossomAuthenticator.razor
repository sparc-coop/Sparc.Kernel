@using System.Threading.Tasks
@using System.Web
@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Web
@using Sparc.Blossom.Authentication

<div class="blossom-authenticator">
    @switch (Auth.LoginState)
    {
        case LoginStates.LoggedOut:
            <button class="loggedout" @onclick="BeginLogin">
                <div class="icon">
                    <UserIcon />
                </div>
                <span>Sign In</span>
            </button>
            break;
        case LoginStates.ReadyForLogin:
        case LoginStates.VerifyingEmail:
        case LoginStates.AwaitingMagicLink:
        case LoginStates.VerifyingToken:
        case LoginStates.Error:
            <label @onclick="LoginAsync" class="@Auth.LoginState">
                <div class="icon">
                    <UserIcon />
                </div>
                @if (Auth.LoginState == LoginStates.ReadyForLogin)
                {
                    <input @ref=LoginInput type="text" @bind="Email" name="username" placeholder="Enter your email" autocomplete="username webauthn" @onclick:stopPropagation="true" />
                    <div class="icon submit">
                        OK
                    </div>
                }
                else if (Auth.LoginState == LoginStates.VerifyingEmail || Auth.LoginState == LoginStates.VerifyingToken)
                {
                    <span>Signing you in...</span>
                }
                else if (Auth.LoginState == LoginStates.AwaitingMagicLink)
                {
                    <span>Click the link in your email!</span>
                }
            </label>
            break;
        case LoginStates.LoggedIn:
            <figure class="loggedin">
                <div class="icon">
                    <UserIcon />
                </div>
                <figcaption>Hi @Auth.User?.Username</figcaption>
                <div class="icon submit" @onclick=LogoutAsync>
                    &#10006;
                </div>
            </figure>
            break;
    }
</div>

@inject IBlossomAuthenticator Auth
@code {
    [Parameter]
    [SupplyParameterFromQuery]
    public string? Token { get; set; }

    public string? Email;

    ElementReference? LoginInput;
    string errorMessage = "";

    protected override async Task OnInitializedAsync()
    {
        if (Auth.User != null || !string.IsNullOrEmpty(Token))
        {
            await foreach (var state in Auth.LoginAsync(Token))
                StateHasChanged();
        }
    }

    async Task BeginLogin()
    {
        // Attempt autofill signin
        await foreach (var state in Auth.LoginAsync())
            StateHasChanged();

        if (Auth.LoginState == LoginStates.LoggedIn)
            return;
        
        Auth.LoginState = LoginStates.ReadyForLogin;
        StateHasChanged();
        await Task.Delay(1);
        if (LoginInput.HasValue)
            await LoginInput.Value.FocusAsync();
    }

    async Task LoginAsync()
    {
        if (string.IsNullOrWhiteSpace(Email))
            return;

        await foreach (var state in Auth.LoginAsync(Email))
            StateHasChanged();
    }

    async Task LogoutAsync()
    {
        await foreach (var state in Auth.LogoutAsync())
            StateHasChanged();
    }
}