@namespace Sparc.Blossom.Realtime
@implements IAsyncDisposable

@ChildContent

@if (Realtime.ConnectionState != null)
{
    <aside class="realtime-hub realtime-hub-@Realtime.ConnectionState.ToString()">
        @switch (Realtime.ConnectionState)
        {
            case ConnectionStates.Connecting:
                <span>Connecting...</span>
                break;
            case ConnectionStates.Reconnecting:
                <span class="">Connection lost, attempting to reconnect...</span>
                break;
            case ConnectionStates.Disconnected:
                if (Realtime.HasError)
                {
                    <span>
                        Unable to connect to realtime service! Check your internet connection.
                        <button @onclick="ConnectAsync">Try again</button>
                    </span>
                }
                else
                {
                    <span></span>
                }
                break;
            case ConnectionStates.Connected:
                <span>
                </span>
                break;
        }
    </aside>
}

@inject NavigationManager Nav
@inject IRealtimeProxy Realtime

@code {
    [Parameter] public RenderFragment ChildContent { get; set; } = null!;
    [Parameter] public bool IsActive { get; set; } = true;

    protected override void OnInitialized()
    {
        Realtime.Initialize(IsActive);
    }

    async Task ConnectAsync()
    {
        await Realtime.ConnectAsync();
    }

    public async ValueTask DisposeAsync()
    {
        await Realtime.DisposeAsync();
    }
}
