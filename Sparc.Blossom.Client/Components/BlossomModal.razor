<div class="blossom-modal @(ShowModal ? "show" : "")">
    @ChildContent
    <div class="bm-buttons">
        @if (OnCancel.HasDelegate)
        {
            <button @onclick="Cancel" class="bm-cancel">@CancelText</button>
        }
        @*<button @onclick="CloseModal" class="modal-close">Close</button>*@
        <button @onclick="Confirm" class="bm-confirm">@OkText</button>
    </div>
    <svg @onclick="Cancel" class="bm-close" focusable="false" aria-hidden="true" width=24 height=24 viewBox="0 0 24 24" data-testid="CloseIcon"><path d="M19 6.41 17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"></path></svg>
</div>
<div @onclick=Cancel class="blossom-modal--overlay @(ShowModal ? "show" : "")"></div>

@code {
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public EventCallback OnOk { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }
    [Parameter] public string OkText { get; set; } = "Confirm";
    [Parameter] public string CancelText { get; set; } = "Cancel";

    bool ShowModal;

    public void Show() => ShowModal = true;

    async void Confirm()
    {
        if (OnOk.HasDelegate)
            await OnOk.InvokeAsync();
        ShowModal = false;
        StateHasChanged();
    }

    async void Cancel()
    {
        ShowModal = false;
        if (OnCancel.HasDelegate)
            await OnCancel.InvokeAsync();
    }
}