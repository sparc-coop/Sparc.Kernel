<div class="blossom-dropdown">
    @typeparam TItem
    
    @if (Placeholder != null)
    {
        <div class="bd-placeholder" @onclick=Expand>
            <span>@Placeholder</span>
            <svg class="@DropdownArrow" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none">
                <path d="M11.9997 13.172L16.9497 8.22198L18.3637 9.63598L11.9997 16L5.63574 9.63598L7.04974 8.22198L11.9997 13.172Z" fill="#070C14" />
            </svg>
        </div>

    } else
    {
        <div class="bd-placeholder" @onclick=Expand>
            <span>Select an option</span>
            <svg class="@DropdownArrow" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none">
                <path d="M11.9997 13.172L16.9497 8.22198L18.3637 9.63598L11.9997 16L5.63574 9.63598L7.04974 8.22198L11.9997 13.172Z" fill="#070C14" />
            </svg>
        </div>
    }
    <div class="bd-list @ShowOptions">
        @if (ShowSearch)
        {
            <DropdownSearch OnSearch="Search" />
        }

        @if (GroupBy != null)
        {
            @if (FilteredValues != null)
            {
                foreach (var group in FilteredValues.GroupBy(GroupBy))
                {
                    <DropdownGroup Header="@group.Key">
                        @foreach (var item in group)
                        {
                            <DropdownItem Value="@Value(item).ToString()" Name="@Name(item).ToString()" OnClick="@(() => Select(item))" />
                        }
                    </DropdownGroup>
                }
            } else
            {
                foreach (var group in Values.GroupBy(GroupBy))
                {
                    <DropdownGroup Header="@group.Key">
                        @foreach (var item in group)
                        {
                            <DropdownItem Value="@Value(item).ToString()" Name="@Name(item).ToString()" OnClick="@(() => Select(item))" />
                        }
                    </DropdownGroup>
                }

            }
        }
        else if (Values != null)
        {
            if (FilteredValues != null)
            {
                foreach (var item in FilteredValues)
                {
                    <DropdownItem Value="@Value(item).ToString()" Name="@Name(item).ToString()" OnClick="@(() => Select(item))" />
                }
            } else
            {
                foreach (var item in Values)
                {
                    <DropdownItem Value="@Value(item).ToString()" Name="@Name(item).ToString()" OnClick="@(() => Select(item))" />
                }
            }
        }
    </div>
</div>

@code {
    [Parameter] public string? Placeholder { get; set; }

    [Parameter] public TItem? SelectedValue { get; set; }
    [Parameter] public EventCallback<TItem?> SelectedValueChanged { get; set; }
    [Parameter] public IEnumerable<TItem> Values { get; set; } = null!;
    [Parameter] public Func<TItem, object> Value { get; set; } = (item) => item;
    [Parameter] public Func<TItem, object> Name { get; set; } = (item) => item;
    [Parameter] public Func<TItem, string?>? GroupBy { get; set; }

    [Parameter] public bool ShowSearch { get; set; }

    string? ShowOptions;
    string? DropdownArrow = "arrow-expand";
    bool ExpandDropdown = false;

    string? SearchTerm;
    IEnumerable<TItem>? FilteredValues;

    void Expand()
    {
        ExpandDropdown = !ExpandDropdown;
        if (ExpandDropdown == true)
        {
            ShowOptions = "show-options";
            DropdownArrow = "arrow-collapse";

        } else
        {
            ShowOptions = "";
            DropdownArrow = "arrow-expand";
        }
    }

    async Task Select(TItem item)
    {
        await SelectedValueChanged.InvokeAsync(item);
        SelectedValue = item;
        Placeholder = Name(item).ToString();
        Expand();
    }

    void Search(string searchTerm)
    {
        SearchTerm = searchTerm;
        FilteredValues = Values.Where(x => Name(x).ToString().ToLower().Contains(SearchTerm.ToLower()));
    }
}