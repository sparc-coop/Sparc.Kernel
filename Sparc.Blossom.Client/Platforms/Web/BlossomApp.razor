@typeparam TApp

@namespace Sparc.Blossom
@using Sparc.Blossom.Authentication

<Router AppAssembly="@typeof(TApp).Assembly" AdditionalAssemblies="@AdditionalAssemblies">
    <Found Context="routeData">
        <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@MainLayout">
            <NotAuthorized>
                @if (!context.User.Identity?.IsAuthenticated == true)
                {
                    <RedirectToLogin />
                }
                else if (NotAuthorized is not null)
                {
                    @NotAuthorized
                }
                else
                {
                    <div class="blossom-authentication">
                        You are not authorized to access
                        this resource.
                    </div>
                }
            </NotAuthorized>
            <Authorizing>
                @if (Authorizing is not null)
                {
                    @Authorizing
                }
                else
                {
                    <div class="blossom-authentication">
                        Logging you in...
                    </div>
                }
            </Authorizing>
        </AuthorizeRouteView>
    </Found>
    <NotFound>
        <LayoutView Layout="@MainLayout">
            @if (NotFound is not null)
            {
                @NotFound
            }
            else
            {
                <p>Sorry, there's nothing at this address.</p>
            }
        </LayoutView>
    </NotFound>
</Router>

@code {
    [Parameter] public Type MainLayout { get; set; } = null!;
    [Parameter] public RenderFragment NotAuthorized { get; set; } = null!;
    [Parameter] public RenderFragment Authorizing { get; set; } = null!;
    [Parameter] public RenderFragment NotFound { get; set; } = null!;
    [Parameter] public RenderFragment Loading { get; set; } = null!;

    public System.Reflection.Assembly[] AdditionalAssemblies => MainLayout.Assembly.FullName == typeof(TApp).Assembly.FullName
        ? new[] { this.GetType().Assembly }
        : new[] { this.GetType().Assembly, MainLayout.Assembly };
} 